using UnityEngine;
using System.Collections;
using System.Collections.Generic;

//From https://github.com/CyberCRI/RedMetrics/blob/master/API.md
public class TrackingEventData {

	//public static Vector3 coordinatesDefaultValue = new Vector3(Mathf.Infinity, Mathf.Infinity, Mathf.Infinity);
	private static Vector3 coordinatesDefaultValue = Vector3.zero;

	/*
    userTime - Date sent by the game (optional)

    serverTime - Date generated by the server

    type - String

    customData - Any data structure. For "gain" and “lose” events, specifies the number of things are gained or lost.

    section - Section (optional)

    coordinates - Coordinate where the event occurred (optional)
	 */ 

	//optional
	public float userTime;

	//managed by RedMetrics server
	//Time serverTime;

	//EventType or TrackingEvent?
	private TrackingEvent internalTrackingEvent;
	public string trackingEvent {
		set {
			internalTrackingEvent = TrackingEvent.DEFAULT;
			foreach(TrackingEvent _trackingEvent in System.Enum.GetValues(typeof(TrackingEvent)))
			{
				if(_trackingEvent.ToString() == value)
				{
					internalTrackingEvent = _trackingEvent;
				}
			}
			if(internalTrackingEvent == TrackingEvent.DEFAULT)
			{
				Debug.LogWarning("unknown tracking event "+value);
			}
		}
		get {return internalTrackingEvent.ToString();}
	}
	private void setTrackingEvent(TrackingEvent _trackingEvent) {
		internalTrackingEvent = _trackingEvent;
	}

	//optional
	public CustomData customData;

	//optional
	public string section;

	//optional
	public Vector3 coordinates;


	public TrackingEventData(){ }

	public TrackingEventData(
		TrackingEvent _trackingEvent, 
		Vector3 _coordinates,
		CustomData _customData = null, 
		string _section = null,
		float _userTime = 0f
		)
	{
		userTime = _userTime;
		setTrackingEvent(_trackingEvent);
		customData = _customData;
		section = _section;
		coordinates = _coordinates;
	}

	public TrackingEventData(
		TrackingEvent _trackingEvent, 
		CustomData _customData = null, 
		string _section = null,
		float _userTime = 0f
	) : this (_trackingEvent, TrackingEventData.coordinatesDefaultValue, _customData, _section, _userTime)
	{

	}

	public override string ToString ()
	{
		return string.Format ("[TrackingEventData: userTime:{0}, trackingEvent:{1}, customData:{2}, section:{3}, coordinates:{4}]"
		                      ,userTime
		                      ,trackingEvent
		                      ,customData
		                      ,section
		                      ,coordinates
		                      );
	}
}

public class CustomData: Dictionary<string, string> {
	public override string ToString ()
	{
		string content = "";
		foreach(KeyValuePair<string, string> entry in this)
		{
			if(!string.IsNullOrEmpty(content))
			{
				content += ",";
			}
			content += entry.Key+":"+entry.Value;
		}
		return string.Format ("[CustomData:[{0}]]", content);
	}
}
